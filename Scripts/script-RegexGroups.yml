commonfields:
  id: RegexGroups
  version: -1
name: RegexGroups
script: |
  match_target = demisto.args()['value']
  regex_pattern = re.compile(r'{}'.format(demisto.args()['regex']))
  capture_groups = demisto.args().get('groups')
  dict_keys = demisto.args().get('keys')

  if capture_groups:
      capture_groups = capture_groups.split(',')
      # Validating groups input
      num_of_words = len(match_target.split(' '))
      if not all(int(num) in range(0, num_of_words+1) for num in capture_groups):
          return_error('Error: groups input is invalid')

  if dict_keys:
      dict_keys = dict_keys.split(',')

  pattern_match = re.match(regex_pattern, match_target)
  matches = []
  if pattern_match:
      for i in pattern_match.groups():
          matches.append(i)

  if capture_groups:
      matches = [matches[int(x)] for x in capture_groups]

  if dict_keys:
      if len(dict_keys) != len(matches):
          return_error('Error: Number of keys does not match number of items')
      else:
          matches = dict(zip(dict_keys,matches))

  demisto.results(matches)
type: python
tags:
- transformer
- string
comment: "Extraction of elements which are contained in all the subgroups of the match
  to the pattern.\nFor example, extracting from the string \"The quick brown fox\"
  the object `{\"article\":\"The\",\"noun\":quick\"}`\n(See arguments descriptions
  for more details) "
enabled: true
args:
- name: value
  required: true
  description: Text to match against, e.g. The quick brown fox
- name: regex
  required: true
  description: Regex pattern to search given in Python, e.g. (The)\s(quick).*(fox)
- name: groups
  description: Capture groups to return - if not provided, all will be returned. (Comma-separated
    values supported). e.g. 0,1
- name: keys
  description: Key names to map to capture group items, ordered by capture groups.
    (Comma-separated values supported) e.g. article,noun
scripttarget: 0
runonce: false

